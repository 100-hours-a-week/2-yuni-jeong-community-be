name : 백엔드 배포

on:
  push:
    branches:
      - deploy/docker-ec2
jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 코드 체크아웃
              uses: actions/checkout@v2
            
            - name: AWS 자격 증명
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ap-northeast-2
            
            - name: Docker 이미지 빌드 및 푸시
              run: |
                aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
                docker build -t community/backend .
                docker tag community/backend:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest
                docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

            - name: EC2에 배포
              uses: appleboy/ssh-action@v0.1.10
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_PRIVATE_KEY }}
                script: |
                    # 기존 컨테이너 중지 및 삭제
                    docker stop backend-container || true
                    docker rm backend-container || true

                    # 기존 이미지 삭제 (디스크 공간 확보)
                    docker rmi $(docker images -q) || true

                    # ECR에서 최신 이미지 가져오기
                    aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
                    docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest

                    # 새로운 컨테이너 실행
                    docker run -d --restart always --name backend-container -p 8080:8080 --env-file ${{ secrets.ENV_FILE_PATH }} ${{ secrets.ECR_REPOSITORY_URI }}:latest

                    # 실행된 컨테이너 확인
                    docker ps -a